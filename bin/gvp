#!/bin/bash
usage() {
cat << EOF
usage: gst [COMMAND]

SYNOPSIS
    gvp stands for Go Vendoring Packager and is based on [gst](http://github.com/tonchis/gst),
    a similar tool that provides vendoring functionality for Ruby gems.

    The tool modifies your GOPATH to point to a local .godeps/ directory so that you
    can keep the dependencies of your project isolated there, it also modifies
    GOBIN and PATH to include the new GOPATH/bin directory.

    gvp is a companion tool to [gpm](http://github.com/pote/gpm) the Go Package Manager.

USAGE
    Since gvp is a script, env changes will not happen unless you source them.

      $ gvp init
      $ source gvp in
      $ source gvp out

COMMANDS
    init    Creates the .godeps directory.
    in      Modifies GOPATH and GOBIN to use the .godeps directory and sets the GVP_NAME variable.
    out     Restores the previous GOPATH and GOBIN and unsets GVP_NAME.
EOF
}

if [[ "$#" -ne 1 ]]; then
  usage
  exit 1
fi

case "$1" in
  "init")
    mkdir .godeps;;
  "in")
    if [[ -n $GVP_NAME ]]; then return; fi

    GVP_DIR="$(pwd)/.godeps"

    if [[ ! -d $GVP_DIR ]]; then
      echo 'Directory .godeps not found. Run `gvp init` first.'
      exit 1
    fi

    GVP_OLD_GOPATH=$GOPATH
    GVP_OLD_GOBIN=$GOBIN
    GVP_OLD_PATH=$PATH
    export GVP_OLD_GOPATH PATH

    GVP_NAME=$(pwd | sed -E "s/^.*\/(.*)$/\\1/")
    GOBIN="$GVP_DIR/bin":$GOBIN
    GOPATH=$GVP_DIR:$GOPATH
    PATH="$GVP_DIR/bin":$PATH

    export GOBIN GOPATH GVP_NAME PATH
    ;;
  "out")
    if [[ -z $GVP_NAME ]]; then return; fi

    GOBIN=$GVP_OLD_BIN_PATH
    GOPATH=$GVP_OLD_GOPATH
    PATH=$GVP_OLD_PATH

    export PATH GOPATH GOBIN
    unset GVP_OLD_GOPATH GVP_OLD_GOBIN GVP_OLD_PATH GVP_NAME
    ;;
  *)
    usage
    exit 1
    ;;
esac
